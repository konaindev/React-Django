# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.1
  node: circleci/node@1.1.3
  heroku: circleci/heroku@0.0.8

jobs:
  build:
    docker:
      - image: circleci/python:3.7.2-node
      - image: circleci/postgres:latest
      - image: circleci/redis:latest
      # pre-built images https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install --silent
      - run: pipenv --bare install
      - run: yarn build --silent
      - run: pipenv run python manage.py collectstatic
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: mv .env-example .env

      # run tests!
      - run: yarn test-ui
      - run: pipenv run python manage.py test
      - run: pipenv run python manage.py makemigrations --merge
      - run: pipenv run python manage.py migrate
      - run: pipenv run python manage.py loaddata data/dumped/latest.json

  # NOTE: This can should likely be added to the PROD deployment
  #       workflow. The idea being that if we have a single source
  #       of truth via storybook/chromatic then we those assets should
  #       be valid before we hit production...
  #
  chromatic-storybook:
    docker:
      - image: circleci/python:3.7.2-node
      - image: circleci/postgres:latest
      - image: circleci/redis:latest

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install --silent
      - run: pipenv --bare install
      - run: yarn build --silent
      - run: pipenv run python manage.py collectstatic
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: yarn run chromatic

  deploy-staging:
    docker:
      - image: circleci/python:3.7.2-node

    working_directory: ~/repo

    steps:
      - run:
          name: Install Heroku Tools
          command: curl https://cli-assets.heroku.com/install.sh | sh
      - checkout
      - aws-cli/install
      - run:
          name: Maintenance Mode On
          command: heroku maintenance:on --app remarkably-staging
      - run:
          name: Deploy Staging to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/remarkably-staging.git staging:master --force
      - run:
          name: Reset Database
          command: heroku pg:reset --app remarkably-staging DATABASE_URL --confirm remarkably-staging
      - run:
          name: Migrate Database Schema
          command: heroku run -x -a remarkably-staging python manage.py migrate
      - run:
          name: Load fixture data
          command: heroku run -x -a remarkably-staging python manage.py loaddata data/dumped/latest.json
      - run:
          name: Maintenance Mode Off
          command: heroku maintenance:off --app remarkably-staging
      - run:
          name: Install Frontend deps
          command: yarn
      - run:
          name: Build Frontend
          command: yarn run build:prod
      - run:
          name: Deploy artifact to S3
          command: yarn run deploy-frontend-staging
      - run:
          name: Invalidate CDN for staging Frontend
          command: yarn run invalidate-cdn-staging

  deploy-production:
    docker:
      - image: circleci/python:3.6.4

    working_directory: ~/repo

    steps:
      - run:
          name: Install Heroku Tools
          command: curl https://cli-assets.heroku.com/install.sh | sh
      - checkout
      - run:
          name: Maintenance Mode On
          command: heroku maintenance:on --app remarkably
      - run:
          name: Backup Production Postgres
          command: heroku pg:backups:capture --app remarkably
      - run:
          name: Deploy Master to Heroku Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/remarkably.git master --force
      - run:
          name: Migrate Database Schema
          command: heroku run -x -a remarkably python manage.py migrate
      - run:
          name: Maintenance Mode Off
          command: heroku maintenance:off --app remarkably

  deploy-storybook:
    docker:
      - image: circleci/python:3.7.2-node

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install --silent
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      # build & deploy the storybook!
      - run: yarn deploy-storybook

workflows:
  version: 2.1

  tests-only:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - staging
                - master

  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: staging
      - deploy-staging:
          context: stage-aws
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-storybook:
          requires:
            - deploy-staging
          filters:
            branches:
              only: staging

  build-production:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - build
      - deploy-production:
          context: deploy-production
          requires:
            - hold
